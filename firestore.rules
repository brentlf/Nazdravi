rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users can only access their own data, admins can access all users
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow read, write: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      allow create: if request.auth != null;
    }
    
    // Admin users collection - only admins can access
    match /adminUsers/{email} {
      allow read, write: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Appointments - users can access their own, admins can access all
    match /appointments/{appointmentId} {
      allow read, write: if request.auth != null && 
        (resource.data.userId == request.auth.uid || 
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      allow create: if request.auth != null;
    }
    
    // Messages - users can access conversations they're part of
    match /messages/{messageId} {
      allow read, write: if request.auth != null && 
        (resource.data.fromUser == request.auth.uid || 
         resource.data.toUser == request.auth.uid ||
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      allow create: if request.auth != null;
    }
    
    // Progress tracking - users can access their own data
    match /progress/{progressId} {
      allow read, write: if request.auth != null && 
        (resource.data.userId == request.auth.uid ||
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      allow create: if request.auth != null;
    }
    
    // Invoices - users can access their own invoices
    match /invoices/{invoiceId} {
      allow read, write: if request.auth != null && 
        (resource.data.userId == request.auth.uid ||
         resource.data.clientEmail == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.email ||
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      allow create: if request.auth != null;
    }
    
    // Resources - public read, admin write
    match /resources/{resourceId} {
      allow read: if true;
      allow write: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Blog posts - public read, admin write
    match /blogPosts/{postId} {
      allow read: if true;
      allow write: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Plans - users can access their own plans
    match /plans/{planId} {
      allow read, write: if request.auth != null && 
        (resource.data.userId == request.auth.uid ||
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      allow create: if request.auth != null;
    }
    
    // Mail queue - only admins can access
    match /mail/{mailId} {
      allow read, write: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Unavailable slots - public read, admin write
    match /unavailableSlots/{slotId} {
      allow read: if true;
      allow write: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Translations - public read, admin write
    match /translations/{translationId} {
      allow read: if true;
      allow write: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Default deny all
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

